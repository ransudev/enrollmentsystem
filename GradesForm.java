/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.esystem;

/**
 *
 * @author lancejaspera.maiso
 */
public class GradesForm extends javax.swing.JFrame {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(GradesForm.class.getName());

    /**
     * Creates new form GradesForm
     */
    public GradesForm() {
        initComponents();
        setLocationRelativeTo(null); // Center the form on screen
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Grades = new javax.swing.JTable();
        studid = new javax.swing.JTextField();
        studname = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        Prelim = new javax.swing.JComboBox<>();
        Midterm = new javax.swing.JComboBox<>();
        PreFinal = new javax.swing.JComboBox<>();
        Finals = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        subjects = new javax.swing.JTable();
        saveGrade = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setText("Teacher's Class List/ Grades Encoding From: ");

        Grades.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "StudID", "StudName", "Prelim", "Midterm", "PreFinal", "Final"
            }
        ));
        Grades.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                GradesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Grades);

        studid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studidActionPerformed(evt);
            }
        });

        studname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studnameActionPerformed(evt);
            }
        });

        jLabel2.setText("Studname");

        jLabel3.setText("StudID");

        Prelim.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A", "B+", "B", "C+", "C", "D", "F", "FD" }));
        Prelim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrelimActionPerformed(evt);
            }
        });

        Midterm.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A", "B+", "B", "C+", "C", "D", "F", "FD" }));
        Midterm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MidtermActionPerformed(evt);
            }
        });

        PreFinal.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A", "B+", "B", "C+", "C", "D", "F", "FD" }));

        Finals.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A", "B+", "B", "C+", "C", "D", "F", "FD" }));

        jLabel4.setText("Prelim");

        jLabel5.setText("Midterm");

        jLabel6.setText("PreFinal");

        jLabel7.setText("Final");

        subjects.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "SubjID", "SubjCode", "SubjDesc", "Units", "Schedule", "Students"
            }
        ));
        subjects.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                subjectsMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(subjects);

        saveGrade.setText("save");
        saveGrade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveGradeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(studid, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(studname, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Prelim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Midterm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PreFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Finals, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addComponent(saveGrade))))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 812, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(studid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(studname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Prelim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Midterm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PreFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Finals, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveGrade))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void studidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_studidActionPerformed

    private void studnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_studnameActionPerformed

    private void PrelimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrelimActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PrelimActionPerformed

    private void MidtermActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MidtermActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MidtermActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // Update the title label to reflect the currently selected database
        try {
            jLabel1.setText("Teacher's Class List/ Grades Encoding From: " + MaisoEnrollmentSystem.db);
        } catch (Exception ignore) {
            // Keep default label if anything unexpected occurs
        }
        
        // Load subjects only - grades table will be populated when a subject is clicked
        loadSubjects();
        
        // Clear combo boxes on startup
        Prelim.setSelectedIndex(-1);
        Midterm.setSelectedIndex(-1);
        PreFinal.setSelectedIndex(-1);
        Finals.setSelectedIndex(-1);
    }//GEN-LAST:event_formWindowOpened

    private void GradesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GradesMouseClicked
        // When a row is clicked in the Grades table, populate the input fields
        javax.swing.table.DefaultTableModel gradesTable = (javax.swing.table.DefaultTableModel) Grades.getModel();
        int selectedRow = Grades.getSelectedRow();
        
        if (selectedRow == -1) {
            return; // No row selected
        }
        
        // Get data from the selected row
        String studId = gradesTable.getValueAt(selectedRow, 0).toString();
        String studName = gradesTable.getValueAt(selectedRow, 1).toString();
        Object prelimObj = gradesTable.getValueAt(selectedRow, 2);
        Object midtermObj = gradesTable.getValueAt(selectedRow, 3);
        Object prefinalObj = gradesTable.getValueAt(selectedRow, 4);
        Object finalsObj = gradesTable.getValueAt(selectedRow, 5);
        
        // Populate text fields
        studid.setText(studId);
        studname.setText(studName);
        
        // Set combo boxes to the current grades (or default to first item if null)
        if (prelimObj != null && !prelimObj.toString().isEmpty()) {
            Prelim.setSelectedItem(prelimObj.toString());
        } else {
            Prelim.setSelectedIndex(0);
        }
        
        if (midtermObj != null && !midtermObj.toString().isEmpty()) {
            Midterm.setSelectedItem(midtermObj.toString());
        } else {
            Midterm.setSelectedIndex(0);
        }
        
        if (prefinalObj != null && !prefinalObj.toString().isEmpty()) {
            PreFinal.setSelectedItem(prefinalObj.toString());
        } else {
            PreFinal.setSelectedIndex(0);
        }
        
        if (finalsObj != null && !finalsObj.toString().isEmpty()) {
            Finals.setSelectedItem(finalsObj.toString());
        } else {
            Finals.setSelectedIndex(0);
        }
    }//GEN-LAST:event_GradesMouseClicked

    private void saveGradeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveGradeActionPerformed
        // Save the grades when the save button is clicked
        try {
            // Get values from input fields
            int studId = Integer.parseInt(studid.getText().trim());
            String prelimGrade = (String) Prelim.getSelectedItem();
            String midtermGrade = (String) Midterm.getSelectedItem();
            String prefinalGrade = (String) PreFinal.getSelectedItem();
            String finalsGrade = (String) Finals.getSelectedItem();
            
            // Get the enrollment ID for this student
            // We need to find the eid from the Enroll table
            MaisoEnrollmentSystem.DBConnect();
            
            String getEidQuery = "SELECT eid FROM Enroll WHERE studid = ?";
            java.sql.PreparedStatement pst = MaisoEnrollmentSystem.con.prepareStatement(getEidQuery);
            pst.setInt(1, studId);
            java.sql.ResultSet rs = pst.executeQuery();
            
            if (rs.next()) {
                int eid = rs.getInt("eid");
                
                // Use the Grades class to save/update the record
                com.mycompany.esystem.Grades gradesObj = new com.mycompany.esystem.Grades();
                
                // Check if grade record exists
                String checkQuery = "SELECT GradeID FROM Grades WHERE eid = ?";
                java.sql.PreparedStatement checkPst = MaisoEnrollmentSystem.con.prepareStatement(checkQuery);
                checkPst.setInt(1, eid);
                java.sql.ResultSet checkRs = checkPst.executeQuery();
                
                if (checkRs.next()) {
                    // Update existing record
                    gradesObj.UpdateRecord(eid, prelimGrade, midtermGrade, prefinalGrade, finalsGrade);
                    javax.swing.JOptionPane.showMessageDialog(this, "Grades updated successfully!");
                } else {
                    // Insert new record
                    gradesObj.SaveRecord(eid, prelimGrade, midtermGrade, prefinalGrade, finalsGrade);
                    javax.swing.JOptionPane.showMessageDialog(this, "Grades saved successfully!");
                }
                
                // Reload the grades table to show updated data
                loadGrades();
                
                // Clear the input fields
                studid.setText("");
                studname.setText("");
                Prelim.setSelectedIndex(0);
                Midterm.setSelectedIndex(0);
                PreFinal.setSelectedIndex(0);
                Finals.setSelectedIndex(0);
            } else {
                javax.swing.JOptionPane.showMessageDialog(this, "No enrollment found for Student ID: " + studId);
            }
        } catch (NumberFormatException ex) {
            javax.swing.JOptionPane.showMessageDialog(this, "Please enter a valid Student ID!");
        } catch (Exception ex) {
            javax.swing.JOptionPane.showMessageDialog(this, "Error saving grades: " + ex.getMessage());
            logger.log(java.util.logging.Level.SEVERE, "Error saving grades", ex);
        }
    }//GEN-LAST:event_saveGradeActionPerformed

    private void subjectsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_subjectsMouseClicked
        // When a subject is clicked, filter the grades table to show only students enrolled in that subject
        javax.swing.table.DefaultTableModel subjectTable = (javax.swing.table.DefaultTableModel) subjects.getModel();
        int selectedRow = subjects.getSelectedRow();
        
        if (selectedRow == -1) {
            return; // No row selected
        }
        
        // Get the subject ID from the selected row
        String subjId = subjectTable.getValueAt(selectedRow, 0).toString();
        
        // Load grades filtered by this subject
        loadGradesBySubject(Integer.parseInt(subjId));
    }//GEN-LAST:event_subjectsMouseClicked

    /**
     * Load subjects from the database into the subjects table
     */
    public void loadSubjects() {
        javax.swing.table.DefaultTableModel subjectTable = (javax.swing.table.DefaultTableModel) subjects.getModel();
        subjectTable.setRowCount(0);
        
        MaisoEnrollmentSystem.DBConnect();
        try {
            // Using nested SELECT query to get subjects with student count
            String query = "SELECT subjid, subjcode, subjdesc, subjunits, subjsched, " +
                          "(SELECT COUNT(*) FROM Enroll WHERE Enroll.subjid = Subjects.subjid) AS student_count " +
                          "FROM Subjects";
            MaisoEnrollmentSystem.rs = MaisoEnrollmentSystem.st.executeQuery(query);
            while (MaisoEnrollmentSystem.rs.next()) {
                String subjId = MaisoEnrollmentSystem.rs.getString("subjid");
                String subjCode = MaisoEnrollmentSystem.rs.getString("subjcode");
                String subjDesc = MaisoEnrollmentSystem.rs.getString("subjdesc");
                String subjUnits = MaisoEnrollmentSystem.rs.getString("subjunits");
                String sched = MaisoEnrollmentSystem.rs.getString("subjsched");
                String studentCount = MaisoEnrollmentSystem.rs.getString("student_count");
                
                String[] row = {subjId, subjCode, subjDesc, subjUnits, sched, studentCount};
                subjectTable.addRow(row);
            }
        } catch (Exception ex) {
            System.out.println("Failed to load subjects: " + ex);
            logger.log(java.util.logging.Level.SEVERE, "Failed to load subjects", ex);
        }
    }
    
    /**
     * Load grades from the database into the Grades table
     */
    public void loadGrades() {
        javax.swing.table.DefaultTableModel gradesTable = (javax.swing.table.DefaultTableModel) Grades.getModel();
        gradesTable.setRowCount(0);
        
        MaisoEnrollmentSystem.DBConnect();
        try {
            // Using nested SELECT query to get grades with student names
            String query = "SELECT e.studid, " +
                          "(SELECT studname FROM Students WHERE Students.studid = e.studid) AS studname, " +
                          "(SELECT Prelim FROM Grades WHERE Grades.eid = e.eid) AS prelim, " +
                          "(SELECT Midterm FROM Grades WHERE Grades.eid = e.eid) AS midterm, " +
                          "(SELECT PreFinal FROM Grades WHERE Grades.eid = e.eid) AS prefinal, " +
                          "(SELECT Final FROM Grades WHERE Grades.eid = e.eid) AS final " +
                          "FROM Enroll e " +
                          "ORDER BY e.studid";
            MaisoEnrollmentSystem.rs = MaisoEnrollmentSystem.st.executeQuery(query);
            while (MaisoEnrollmentSystem.rs.next()) {
                String studId = MaisoEnrollmentSystem.rs.getString("studid");
                String studName = MaisoEnrollmentSystem.rs.getString("studname");
                String prelim = MaisoEnrollmentSystem.rs.getString("prelim");
                String midterm = MaisoEnrollmentSystem.rs.getString("midterm");
                String prefinal = MaisoEnrollmentSystem.rs.getString("prefinal");
                String finals = MaisoEnrollmentSystem.rs.getString("final");
                
                String[] row = {studId, studName, prelim, midterm, prefinal, finals};
                gradesTable.addRow(row);
            }
        } catch (Exception ex) {
            System.out.println("Failed to load grades: " + ex);
            logger.log(java.util.logging.Level.SEVERE, "Failed to load grades", ex);
        }
    }
    
    /**
     * Load grades filtered by a specific subject ID
     * @param subjId The subject ID to filter by
     */
    public void loadGradesBySubject(int subjId) {
        javax.swing.table.DefaultTableModel gradesTable = (javax.swing.table.DefaultTableModel) Grades.getModel();
        gradesTable.setRowCount(0);
        
        MaisoEnrollmentSystem.DBConnect();
        try {
            // Using nested SELECT query to get grades with student names, filtered by subject
            String query = "SELECT e.studid, " +
                          "(SELECT studname FROM Students WHERE Students.studid = e.studid) AS studname, " +
                          "(SELECT Prelim FROM Grades WHERE Grades.eid = e.eid) AS prelim, " +
                          "(SELECT Midterm FROM Grades WHERE Grades.eid = e.eid) AS midterm, " +
                          "(SELECT PreFinal FROM Grades WHERE Grades.eid = e.eid) AS prefinal, " +
                          "(SELECT Final FROM Grades WHERE Grades.eid = e.eid) AS final " +
                          "FROM Enroll e " +
                          "WHERE e.subjid = ? " +
                          "ORDER BY e.studid";
            
            java.sql.PreparedStatement pst = MaisoEnrollmentSystem.con.prepareStatement(query);
            pst.setInt(1, subjId);
            java.sql.ResultSet rs = pst.executeQuery();
            
            while (rs.next()) {
                String studId = rs.getString("studid");
                String studName = rs.getString("studname");
                String prelim = rs.getString("prelim");
                String midterm = rs.getString("midterm");
                String prefinal = rs.getString("prefinal");
                String finals = rs.getString("final");
                
                String[] row = {studId, studName, prelim, midterm, prefinal, finals};
                gradesTable.addRow(row);
            }
        } catch (Exception ex) {
            System.out.println("Failed to load grades for subject: " + ex);
            logger.log(java.util.logging.Level.SEVERE, "Failed to load grades for subject", ex);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new GradesForm().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> Finals;
    private javax.swing.JTable Grades;
    private javax.swing.JComboBox<String> Midterm;
    private javax.swing.JComboBox<String> PreFinal;
    private javax.swing.JComboBox<String> Prelim;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton saveGrade;
    private javax.swing.JTextField studid;
    private javax.swing.JTextField studname;
    private javax.swing.JTable subjects;
    // End of variables declaration//GEN-END:variables
}

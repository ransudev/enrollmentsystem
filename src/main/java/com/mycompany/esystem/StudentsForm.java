/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.esystem;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.ResultSet;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.time.Year;


/**
 *
 * @author ljamaiso
 */
public class StudentsForm extends javax.swing.JFrame {

    /**
     * Creates new form StudentsForm
     */
    public StudentsForm() {
        initComponents();
        this.setDefaultCloseOperation(HIDE_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        Studid = new javax.swing.JTextField();
        Name = new javax.swing.JTextField();
        Address = new javax.swing.JTextField();
        Contact = new javax.swing.JTextField();
        Gender = new javax.swing.JTextField();
        Yrlvl = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        save = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        Update = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        StudentsTable = new javax.swing.JTable();
        Enroll = new javax.swing.JButton();
        Drop = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        search = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        Exit = new javax.swing.JMenuItem();
        databases = new javax.swing.JMenu();
        firstSem = new javax.swing.JMenuItem();
        secondSem = new javax.swing.JMenuItem();
        summer = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        jMenuItem1.setText("jMenuItem1");

        jMenuItem2.setText("jMenuItem2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        Studid.setEditable(false);

        Name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NameActionPerformed(evt);
            }
        });

        jLabel1.setText("Student ID");

        jLabel2.setText("Enter name");

        jLabel3.setText("Enter Address");

        jLabel4.setText("Enter Contact");

        jLabel5.setText("Enter Gender");

        jLabel6.setText("Year Lvl");

        save.setText("Save");
        save.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveMouseClicked(evt);
            }
        });
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        Delete.setText("Delete");
        Delete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DeleteMouseClicked(evt);
            }
        });
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });

        Update.setText("Update");
        Update.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                UpdateMouseClicked(evt);
            }
        });
        Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel7.setText("Student Registration");

        StudentsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Student ID", "Name", "Address", "Contact", "Gender", "Year Level"
            }
        ));
        StudentsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                StudentsTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(StudentsTable);

        Enroll.setText("Enroll Subject");
        Enroll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EnrollActionPerformed(evt);
            }
        });

        Drop.setText("Drop Subject");
        Drop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DropActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SubjID", "SubjUnits", "SubjDesc", "SubjUnits", "SubjSched"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel9.setText("Enrolled Subjects");

        jLabel8.setText("Search");

        jMenu1.setText("Form");

        jMenuItem3.setText("Teachers");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setText("Subjects");
        jMenuItem4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuItem4MouseClicked(evt);
            }
        });
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);
        jMenu1.add(jSeparator1);

        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        jMenu1.add(Exit);

        jMenuBar1.add(jMenu1);

        databases.setText("Database");

        firstSem.setText("1st Semester");
        firstSem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstSemActionPerformed(evt);
            }
        });
        databases.add(firstSem);

        secondSem.setText("2nd Semester");
        secondSem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                secondSemActionPerformed(evt);
            }
        });
        databases.add(secondSem);

        summer.setText("Summer");
        summer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                summerActionPerformed(evt);
            }
        });
        databases.add(summer);

        jMenuBar1.add(databases);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(save)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(Update))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(Yrlvl)
                                        .addComponent(Gender, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(Contact, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(Address, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(Name, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(Studid, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(Enroll, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(Drop, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jLabel9)))))
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 499, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(95, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Studid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Address, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Contact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Gender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Yrlvl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(save)
                            .addComponent(Delete)
                            .addComponent(Update)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(18, 18, 18)
                        .addComponent(Enroll, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Drop, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void NameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NameActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        Students a =  new Students();
        int studentId = a.SaveRecord(Name.getText(), Address.getText(), Contact.getText(), Gender.getText(), Yrlvl.getText());
        showrec();
        
        createStudentUser(studentId, Name.getText());
    }//GEN-LAST:event_saveActionPerformed

    private void createStudentUser(int studentId, String studentName) {
        try {
            // Connect to MySQL as root to create user
            String host = "192.168.64.3";
            String url = "jdbc:mysql://" + host + ":3306/?zeroDateTimeBehavior=CONVERT_TO_NULL&connectTimeout=5000";
            Connection conn = DriverManager.getConnection(url, "root", "maiso");
            Statement stmt = conn.createStatement();
            
            // Create username (studid + stud name) and password (AdDu + stud name)
            String username = studentId + studentName.toLowerCase().replaceAll("\\s+", "");
            String password = "AdDu" + studentName;
            
            // Create the user
            String createUserSQL = "CREATE USER IF NOT EXISTS '" + username + "'@'%' IDENTIFIED BY '" + password + "'";
            stmt.execute(createUserSQL);
            
            // Grant SELECT privileges on relevant tables
            stmt.execute("GRANT SELECT ON `1st_SY2025_2026`.`Students` TO '" + username + "'@'%'");
            stmt.execute("GRANT SELECT ON `1st_SY2025_2026`.`Subjects` TO '" + username + "'@'%'");
            stmt.execute("GRANT SELECT ON `1st_SY2025_2026`.`Teachers` TO '" + username + "'@'%'");
            stmt.execute("GRANT SELECT ON `1st_SY2025_2026`.`Enroll` TO '" + username + "'@'%'");
            stmt.execute("GRANT SELECT ON `1st_SY2025_2026`.`Grades` TO '" + username + "'@'%'");
            stmt.execute("GRANT SELECT ON `1st_SY2025_2026`.`Assign` TO '" + username + "'@'%'");
            
            // Flush privileges
            stmt.execute("FLUSH PRIVILEGES");
            
            System.out.println("Created database user for student: " + username);
            System.out.println("Password: " + password);
            
            stmt.close();
            conn.close();
        } catch (Exception ex) {
            System.out.println("Failed to create database user for student: " + ex.getMessage());
            ex.printStackTrace();
        }
    }

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        Students b = new Students();
        b.DeleteRecord(Integer.valueOf(Studid.getText()));
        showrec();
        Studid.setText("");
        Name.setText("");
        Address.setText("");
        Contact.setText("");
        Gender.setText("");
        Yrlvl.setText("");       
    }//GEN-LAST:event_DeleteActionPerformed

    private void UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateActionPerformed
        Students a =  new Students();
        a.UpdateRecord(Integer.valueOf(Studid.getText()), Name.getText(), Address.getText(), Contact.getText(), Gender.getText(), Yrlvl.getText());
        showrec();
        Studid.setText("");
        Name.setText("");
        Address.setText("");
        Contact.setText("");
        Gender.setText("");
        Yrlvl.setText(""); 
    }//GEN-LAST:event_UpdateActionPerformed

    private void saveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveMouseClicked
     
    }//GEN-LAST:event_saveMouseClicked

    private void DeleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DeleteMouseClicked

    }//GEN-LAST:event_DeleteMouseClicked

    private void UpdateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UpdateMouseClicked

    }//GEN-LAST:event_UpdateMouseClicked

    private void jMenuItem4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem4MouseClicked

    }//GEN-LAST:event_jMenuItem4MouseClicked

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
         
    if (MaisoEnrollmentSystem.teachersFormInstance == null) {
        MaisoEnrollmentSystem.teachersFormInstance = new TeachersForm();
    }
    MaisoEnrollmentSystem.teachersFormInstance.setVisible(true);
        
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
    if (MaisoEnrollmentSystem.subjectsFormInstance == null) {
        MaisoEnrollmentSystem.subjectsFormInstance = new SubjectsForm();
    }
    MaisoEnrollmentSystem.subjectsFormInstance.setVisible(true);
        
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        showrec();
        Students a =  new Students();
        a.LoadRecord();
    }//GEN-LAST:event_formWindowOpened

    private void StudentsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_StudentsTableMouseClicked
     DefaultTableModel studTable = (DefaultTableModel) StudentsTable.getModel();
    int selectedRow = StudentsTable.getSelectedRow();

    if (selectedRow == -1) return;

    Studid.setText(studTable.getValueAt(selectedRow, 0).toString());
    Name.setText(studTable.getValueAt(selectedRow, 1).toString());
    Address.setText(studTable.getValueAt(selectedRow, 2).toString());
    Contact.setText(studTable.getValueAt(selectedRow, 3).toString());
    Gender.setText(studTable.getValueAt(selectedRow, 4).toString());
    Yrlvl.setText(studTable.getValueAt(selectedRow, 5).toString());

    try {
        Integer.parseInt(Studid.getText().trim()); // validate ID
        showEnrollRec();                            // refresh enrolled list
    } catch (NumberFormatException ex) {
        javax.swing.JOptionPane.showMessageDialog(this, "Invalid student ID.");
    }
    }//GEN-LAST:event_StudentsTableMouseClicked

    private void EnrollActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EnrollActionPerformed
    String sidText = Studid.getText().trim();
    if (sidText.isEmpty()) {
        javax.swing.JOptionPane.showMessageDialog(this, "Please select a student first.");
        return;
    }
    int studid;
    try { studid = Integer.parseInt(sidText); }
    catch (NumberFormatException ex) {
        javax.swing.JOptionPane.showMessageDialog(this, "Invalid student ID.");
        return;
    }

    if (MaisoEnrollmentSystem.subjectsFormInstance == null || !MaisoEnrollmentSystem.subjectsFormInstance.isDisplayable()) {
        javax.swing.JOptionPane.showMessageDialog(this, "Open Subjects form and click a subject first.");
        return;
    }
    int subjid;
    try {
        java.lang.reflect.Field fTbl = SubjectsForm.class.getDeclaredField("subjectTable");
        fTbl.setAccessible(true);
        javax.swing.JTable tbl = (javax.swing.JTable) fTbl.get(MaisoEnrollmentSystem.subjectsFormInstance);
        int row = tbl.getSelectedRow();
        if (row < 0) {
            javax.swing.JOptionPane.showMessageDialog(this, "Please click a subject in the Subjects form first.");
            return;
        }
        subjid = Integer.parseInt(tbl.getValueAt(row, 0).toString());
    } catch (Exception ex) {
        javax.swing.JOptionPane.showMessageDialog(this, "Unable to read subject selection. Please re-open Subjects and select a subject.");
        return;
    }

   
    Enrolled en = new Enrolled();
    en.setsubjid(subjid);
    en.enrollStud(studid);

    showEnrollRec();
    }//GEN-LAST:event_EnrollActionPerformed

    private void DropActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DropActionPerformed
        String sidText = Studid.getText().trim();
        if (sidText.isEmpty()) {
            javax.swing.JOptionPane.showMessageDialog(this, "Please select a student first.");
            return;
        }
        int studid;
        try {
            studid = Integer.parseInt(sidText);
        } catch (NumberFormatException ex) {
            javax.swing.JOptionPane.showMessageDialog(this, "Invalid student ID.");
            return;
        }

        int row = jTable1.getSelectedRow(); // table that lists enrolled subjects
        if (row < 0) {
            javax.swing.JOptionPane.showMessageDialog(this, "Select a subject from 'Enrolled Subjects' to drop.");
            return;
        }

        int subjid;
        try {
            subjid = Integer.parseInt(jTable1.getValueAt(row, 0).toString()); 
        } catch (Exception ex) {
            javax.swing.JOptionPane.showMessageDialog(this, "Invalid subject selection.");
            return;
        }

        int confirm = javax.swing.JOptionPane.showConfirmDialog(
            this,
            "Drop subject " + subjid + " for student " + studid + "?",
            "Confirm Drop",
            javax.swing.JOptionPane.YES_NO_OPTION,
            javax.swing.JOptionPane.WARNING_MESSAGE
        );
        if (confirm != javax.swing.JOptionPane.YES_OPTION) return;

        Enrolled en = new Enrolled();
        en.setsubjid(subjid);
        en.DropSubj(studid);   

        showEnrollRec();
    }//GEN-LAST:event_DropActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
    int response = JOptionPane.showConfirmDialog(this, "Are you sure you want to exit the application?", "Confirm Exit",JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE );
    if (response == JOptionPane.YES_OPTION) {
        System.exit(0);
    }
    }//GEN-LAST:event_ExitActionPerformed

    private void firstSemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstSemActionPerformed
                                              
            try {
            MaisoEnrollmentSystem a = new MaisoEnrollmentSystem();
            a.DBConnect();

            int currentYear = java.time.Year.now().getValue();
            int nextYear = currentYear + 1;
            String schoolYear = "SY" + currentYear + "_" + nextYear;
            String dbName = "1st_" + schoolYear;

            a.st.execute("CREATE DATABASE IF NOT EXISTS `" + dbName + "`");
            a.st.execute("USE `" + dbName + "`");

           
        a.st.execute("CREATE TABLE IF NOT EXISTS Students ("
                + "studid INT PRIMARY KEY AUTO_INCREMENT,"
                + "studname VARCHAR(100) NOT NULL,"
                + "studadd VARCHAR(200) NOT NULL,"
                + "studcontact VARCHAR(100) NOT NULL,"
                + "studgender VARCHAR(20) NOT NULL,"
                + "yrlvl VARCHAR(20) NOT NULL"
                + ")");
        
        a.st.execute("CREATE TABLE IF NOT EXISTS Subjects ("
                + "subjid INT PRIMARY KEY AUTO_INCREMENT,"
                + "subjcode VARCHAR(50) NOT NULL,"
                + "subjdesc VARCHAR(200) NOT NULL,"
                + "subjunits INT NOT NULL,"
                + "subjsched VARCHAR(100) NOT NULL"
                + ")");

        a.st.execute("CREATE TABLE IF NOT EXISTS Teachers ("
                + "Tid INT PRIMARY KEY AUTO_INCREMENT,"
                + "Tname VARCHAR(100) NOT NULL,"
                + "Tdept VARCHAR(100) NOT NULL,"
                + "Tadd VARCHAR(200) NOT NULL,"
                + "Tcontact VARCHAR(50) NOT NULL"
                + ")");
        
        a.st.execute("CREATE TABLE IF NOT EXISTS Enroll ("
                + "eid INT PRIMARY KEY AUTO_INCREMENT,"
                + "studid INT NOT NULL,"
                + "subjid INT NOT NULL,"
                + "UNIQUE (studid, subjid),"
                + "FOREIGN KEY (studid) REFERENCES Students(studid),"
                + "FOREIGN KEY (subjid) REFERENCES Subjects(subjid)"
                + ")");

        a.st.execute("CREATE TABLE IF NOT EXISTS Assign ("
                + "Tid INT NOT NULL,"
                + "subjid INT PRIMARY KEY,"
                + "FOREIGN KEY (Tid) REFERENCES Teachers(Tid),"
                + "FOREIGN KEY (subjid) REFERENCES Subjects(subjid)"
                + ")");

        a.st.execute("CREATE TABLE IF NOT EXISTS Grades ("
                + "GradeID INT PRIMARY KEY AUTO_INCREMENT,"
                + "eid INT NOT NULL UNIQUE,"
                + "Prelim TEXT NOT NULL,"
                + "Midterm TEXT NOT NULL,"
                + "Prefinal TEXT NOT NULL,"
                + "Final TEXT NOT NULL,"
                + "FOREIGN KEY (eid) REFERENCES Enroll(eid)"
                + ")");

        a.st.execute("CREATE TABLE IF NOT EXISTS TransactionCharges ("
                + "TransID INT PRIMARY KEY,"
                + "Department TEXT NOT NULL,"
                + "SubjUnits DECIMAL(10,2) NOT NULL,"
                + "Insurance DECIMAL(10,2) NOT NULL,"
                + "Computer DECIMAL(10,2) NOT NULL,"
                + "Laboratory DECIMAL(10,2) NOT NULL,"
                + "Cultural DECIMAL(10,2) NOT NULL,"
                + "Library DECIMAL(10,2) NOT NULL,"
                + "Facility DECIMAL(10,2) NOT NULL"
                + ")");

        a.st.execute("CREATE TABLE IF NOT EXISTS Invoice ("
                + "Invoicenum INT PRIMARY KEY,"
                + "studid INT NOT NULL,"
                + "TransID INT NOT NULL,"
                + "FOREIGN KEY (studid) REFERENCES Students(studid),"
                + "FOREIGN KEY (TransID) REFERENCES TransactionCharges(TransID)"
                + ")");
          
            JOptionPane.showMessageDialog(
                this,
                "Database Created: " + dbName,
                "New Database",
                JOptionPane.INFORMATION_MESSAGE
            );

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error creating database/tables: " + ex.getMessage());
        }

    }//GEN-LAST:event_firstSemActionPerformed

    private void summerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_summerActionPerformed
    
    try {
        MaisoEnrollmentSystem a = new MaisoEnrollmentSystem();
        a.DBConnect();

        int currentYear = java.time.Year.now().getValue();
        int nextYear = currentYear + 1;
        String schoolYear = "SY" + currentYear + "_" + nextYear;
        String dbName = "Summer_" + schoolYear;

        a.st.execute("CREATE DATABASE IF NOT EXISTS `" + dbName + "`");
        a.st.execute("USE `" + dbName + "`");

        a.st.execute("CREATE TABLE IF NOT EXISTS Students ("
                + "studid INT PRIMARY KEY AUTO_INCREMENT,"
                + "studname VARCHAR(100) NOT NULL,"
                + "studadd VARCHAR(200) NOT NULL,"
                + "studcontact VARCHAR(100) NOT NULL,"
                + "studgender VARCHAR(20) NOT NULL,"
                + "yrlvl VARCHAR(20) NOT NULL"
                + ")");

        a.st.execute("CREATE TABLE IF NOT EXISTS Subjects ("
                + "subjid INT PRIMARY KEY AUTO_INCREMENT,"
                + "subjcode VARCHAR(50) NOT NULL,"
                + "subjdesc VARCHAR(200) NOT NULL,"
                + "subjunits INT NOT NULL,"
                + "subjsched VARCHAR(100) NOT NULL"
                + ")");

        a.st.execute("CREATE TABLE IF NOT EXISTS Teachers ("
                + "Tid INT PRIMARY KEY AUTO_INCREMENT,"
                + "Tname VARCHAR(100) NOT NULL,"
                + "Tdept VARCHAR(100) NOT NULL,"
                + "Tadd VARCHAR(200) NOT NULL,"
                + "Tcontact VARCHAR(50) NOT NULL"
                + ")");

        a.st.execute("CREATE TABLE IF NOT EXISTS Enroll ("
                + "eid INT PRIMARY KEY AUTO_INCREMENT,"
                + "studid INT NOT NULL,"
                + "subjid INT NOT NULL,"
                + "UNIQUE (studid, subjid),"
                + "FOREIGN KEY (studid) REFERENCES Students(studid),"
                + "FOREIGN KEY (subjid) REFERENCES Subjects(subjid)"
                + ")");

        a.st.execute("CREATE TABLE IF NOT EXISTS Assign ("
                + "Tid INT NOT NULL,"
                + "subjid INT PRIMARY KEY,"
                + "FOREIGN KEY (Tid) REFERENCES Teachers(Tid),"
                + "FOREIGN KEY (subjid) REFERENCES Subjects(subjid)"
                + ")");

        a.st.execute("CREATE TABLE IF NOT EXISTS Grades ("
                + "GradeID INT PRIMARY KEY AUTO_INCREMENT,"
                + "eid INT NOT NULL UNIQUE,"
                + "Prelim TEXT NOT NULL,"
                + "Midterm TEXT NOT NULL,"
                + "Prefinal TEXT NOT NULL,"
                + "Final TEXT NOT NULL,"
                + "FOREIGN KEY (eid) REFERENCES Enroll(eid)"
                + ")");

        a.st.execute("CREATE TABLE IF NOT EXISTS TransactionCharges ("
                + "TransID INT PRIMARY KEY,"
                + "Department TEXT NOT NULL,"
                + "SubjUnits DECIMAL(10,2) NOT NULL,"
                + "Insurance DECIMAL(10,2) NOT NULL,"
                + "Computer DECIMAL(10,2) NOT NULL,"
                + "Laboratory DECIMAL(10,2) NOT NULL,"
                + "Cultural DECIMAL(10,2) NOT NULL,"
                + "Library DECIMAL(10,2) NOT NULL,"
                + "Facility DECIMAL(10,2) NOT NULL"
                + ")");

        a.st.execute("CREATE TABLE IF NOT EXISTS Invoice ("
                + "Invoicenum INT PRIMARY KEY,"
                + "studid INT NOT NULL,"
                + "TransID INT NOT NULL,"
                + "FOREIGN KEY (studid) REFERENCES Students(studid),"
                + "FOREIGN KEY (TransID) REFERENCES TransactionCharges(TransID)"
                + ")");

        JOptionPane.showMessageDialog(
            this,
            "Database Created: " + dbName,
            "New Database",
            JOptionPane.INFORMATION_MESSAGE
        );

    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this, "Error creating database/tables: " + ex.getMessage());
    }
    }//GEN-LAST:event_summerActionPerformed

    private void secondSemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_secondSemActionPerformed
    
    try {
        MaisoEnrollmentSystem a = new MaisoEnrollmentSystem();
        a.DBConnect();

        int currentYear = java.time.Year.now().getValue();
        int nextYear = currentYear + 1;
        String schoolYear = "SY" + currentYear + "_" + nextYear;
        String dbName = "2nd_" + schoolYear;

        a.st.execute("CREATE DATABASE IF NOT EXISTS `" + dbName + "`");
        a.st.execute("USE `" + dbName + "`");

        a.st.execute("CREATE TABLE IF NOT EXISTS Students ("
                + "studid INT PRIMARY KEY AUTO_INCREMENT,"
                + "studname VARCHAR(100) NOT NULL,"
                + "studadd VARCHAR(200) NOT NULL,"
                + "studcontact VARCHAR(100) NOT NULL,"
                + "studgender VARCHAR(20) NOT NULL,"
                + "yrlvl VARCHAR(20) NOT NULL"
                + ")");
       
        a.st.execute("CREATE TABLE IF NOT EXISTS Subjects ("
                + "subjid INT PRIMARY KEY AUTO_INCREMENT,"
                + "subjcode VARCHAR(50) NOT NULL,"
                + "subjdesc VARCHAR(200) NOT NULL,"
                + "subjunits INT NOT NULL,"
                + "subjsched VARCHAR(100) NOT NULL"
                + ")");
         
        a.st.execute("CREATE TABLE IF NOT EXISTS Teachers ("
                + "Tid INT PRIMARY KEY AUTO_INCREMENT,"
                + "Tname VARCHAR(100) NOT NULL,"
                + "Tdept VARCHAR(100) NOT NULL,"
                + "Tadd VARCHAR(200) NOT NULL,"
                + "Tcontact VARCHAR(50) NOT NULL"
                + ")");

        a.st.execute("CREATE TABLE IF NOT EXISTS Enroll ("
                + "eid INT PRIMARY KEY AUTO_INCREMENT,"
                + "studid INT NOT NULL,"
                + "subjid INT NOT NULL,"
                + "UNIQUE (studid, subjid),"
                + "FOREIGN KEY (studid) REFERENCES Students(studid),"
                + "FOREIGN KEY (subjid) REFERENCES Subjects(subjid)"
                + ")");
        
        a.st.execute("CREATE TABLE IF NOT EXISTS Assign ("
                + "Tid INT NOT NULL,"
                + "subjid INT PRIMARY KEY,"
                + "FOREIGN KEY (Tid) REFERENCES Teachers(Tid),"
                + "FOREIGN KEY (subjid) REFERENCES Subjects(subjid)"
                + ")");

        a.st.execute("CREATE TABLE IF NOT EXISTS Grades ("
                + "GradeID INT PRIMARY KEY AUTO_INCREMENT,"
                + "eid INT NOT NULL UNIQUE,"
                + "Prelim TEXT NOT NULL,"
                + "Midterm TEXT NOT NULL,"
                + "Prefinal TEXT NOT NULL,"
                + "Final TEXT NOT NULL,"
                + "FOREIGN KEY (eid) REFERENCES Enroll(eid)"
                + ")");

        a.st.execute("CREATE TABLE IF NOT EXISTS TransactionCharges ("
                + "TransID INT PRIMARY KEY,"
                + "Department TEXT NOT NULL,"
                + "SubjUnits DECIMAL(10,2) NOT NULL,"
                + "Insurance DECIMAL(10,2) NOT NULL,"
                + "Computer DECIMAL(10,2) NOT NULL,"
                + "Laboratory DECIMAL(10,2) NOT NULL,"
                + "Cultural DECIMAL(10,2) NOT NULL,"
                + "Library DECIMAL(10,2) NOT NULL,"
                + "Facility DECIMAL(10,2) NOT NULL"
                + ")");

        a.st.execute("CREATE TABLE IF NOT EXISTS Invoice ("
                + "Invoicenum INT PRIMARY KEY,"
                + "studid INT NOT NULL,"
                + "TransID INT NOT NULL,"
                + "FOREIGN KEY (studid) REFERENCES Students(studid),"
                + "FOREIGN KEY (TransID) REFERENCES TransactionCharges(TransID)"
                + ")");

        JOptionPane.showMessageDialog(
            this,
            "Database Created: " + dbName,
            "New Database",
            JOptionPane.INFORMATION_MESSAGE
        );

    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this, "Error creating database/tables: " + ex.getMessage());
    }
    }//GEN-LAST:event_secondSemActionPerformed
    
public void showrec(){
        
        DefaultTableModel studtable = (DefaultTableModel) StudentsTable.getModel();
        studtable.setRowCount(0);
        
        MaisoEnrollmentSystem a = new MaisoEnrollmentSystem();
        a.DBConnect();
        try{
            String query = "select studid, studname, studadd, studcontact, studgender, yrlvl from Students;";
                a.rs = a.st.executeQuery(query);
                while (a.rs.next()){
                    String studid = a.rs.getString("studid");
                    String studname = a.rs.getString("studname");
                    String address = a.rs.getString("studadd");
                    String contact = a.rs.getString("studcontact");
                    String gender = a.rs.getString("studgender");
                    String yrlvl = a.rs.getString("yrlvl");
                    String[] item = {studid, studname, address, contact, gender, yrlvl};
                    studtable.addRow(item);
                }
        }catch (Exception ex) {
            System.out.println("FAILED" + ex);
        }
    }
    
   

    public void showEnrollRec() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);

        String sidText = Studid.getText().trim();
        if (sidText.isEmpty()) return;

        int sid;
        try {
            sid = Integer.parseInt(sidText);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Invalid student ID.");
            return;
        }

        MaisoEnrollmentSystem a = new MaisoEnrollmentSystem();
        a.DBConnect();
        try {
            String sql =
            "SELECT e.subjid AS SubjID, s.subjcode AS Code, s.subjdesc AS Description, " +
            "       s.subjunits AS Units, s.subjsched AS Schedule " +
            "FROM Enroll e " +
            "INNER JOIN Subjects s ON s.subjid = e.subjid " +
            "WHERE e.studid = " + sid + " " +
            "ORDER BY e.subjid";
            a.rs = a.st.executeQuery(sql);
            while (a.rs.next()) {
            String[] row = {
                a.rs.getString("SubjID"),
                a.rs.getString("Code"),
                a.rs.getString("Description"),
                a.rs.getString("Units"),
                a.rs.getString("Schedule")
            };
                model.addRow(row);
            }
        } catch (Exception ex) {
            System.out.println("showEnrollRec FAILED: " + ex);
        }
    }
    


    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudentsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudentsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudentsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudentsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StudentsForm().setVisible(true);
            }
        });
    }
    

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Address;
    private javax.swing.JTextField Contact;
    private javax.swing.JButton Delete;
    private javax.swing.JButton Drop;
    private javax.swing.JButton Enroll;
    private javax.swing.JMenuItem Exit;
    private javax.swing.JTextField Gender;
    private javax.swing.JTextField Name;
    private javax.swing.JTable StudentsTable;
    private javax.swing.JTextField Studid;
    private javax.swing.JButton Update;
    private javax.swing.JTextField Yrlvl;
    private javax.swing.JMenu databases;
    private javax.swing.JMenuItem firstSem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton save;
    private javax.swing.JTextField search;
    private javax.swing.JMenuItem secondSem;
    private javax.swing.JMenuItem summer;
    // End of variables declaration//GEN-END:variables
}